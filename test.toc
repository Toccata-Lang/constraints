
;; regression tests for constraints.toc

(add-ns c (module "constraints.toc"))

(def coll-of-int (c/CollectionOf c/int-constraint empty-list c/no-symbol ""))
(def int-list (c/ListConstraint [] coll-of-int empty-list c/no-symbol ""))
(def int-list-1 (c/ListConstraint [c/int-constraint] c/no-tail empty-list c/no-symbol ""))
(def int-list-2 (c/ListConstraint [c/int-constraint c/int-constraint] c/no-tail empty-list c/no-symbol ""))

(def int-vect (c/VectorConstraint [] coll-of-int empty-list c/no-symbol ""))
(def int-vect-1 (c/VectorConstraint [c/int-constraint] c/no-tail empty-list c/no-symbol ""))
(def int-vect-2 (c/VectorConstraint [c/int-constraint c/int-constraint] c/no-tail empty-list c/no-symbol ""))

(def sym-c (c/SymbolConstraint 'this-sym empty-list c/no-symbol ""))
(def coll-of-sym (c/CollectionOf c/sym-constraint empty-list c/no-symbol ""))

(def substr-c (c/SubStrConstraint "strng" empty-list c/no-symbol ""))
(def str-c (c/StrBuffConstraint "buffr" empty-list c/no-symbol ""))
(def coll-of-str (c/CollectionOf c/string-constraint empty-list c/no-symbol ""))

(def hash-coll-constraint (c/HashMapConstraint c/HashCollisionNodeType {}
                                               c/top-type c/top-type empty-list c/no-symbol ""))
(def array-constraint (c/HashMapConstraint c/ArrayNodeType {} c/top-type c/top-type empty-list c/no-symbol ""))
(def bitmap-constraint (c/HashMapConstraint c/BitmapIndexedType {} c/top-type c/top-type empty-list c/no-symbol ""))

(def pos-int (c/IntegerConstraint c/no-int int-max 1 empty-list c/no-symbol ""))
(def neg-int (c/IntegerConstraint c/no-int -1 int-min empty-list c/no-symbol ""))
(def pos-1 (c/IntegerConstraint 1 int-max int-min empty-list c/no-symbol ""))
(def pos-2 (c/IntegerConstraint 2 int-max int-min empty-list c/no-symbol ""))
(def pos-10 (c/IntegerConstraint 10 int-max int-min empty-list c/no-symbol ""))
(def neg-1 (c/IntegerConstraint -1 int-max int-min empty-list c/no-symbol ""))
(def neg-10 (c/IntegerConstraint -10 int-max int-min empty-list c/no-symbol ""))
(def int-0 (c/IntegerConstraint 0 int-max int-min empty-list c/no-symbol ""))
(def non-0 (c/SumConstraint [pos-int neg-int] empty-list c/no-symbol ""))

(def int-or-str (c/SumConstraint [c/int-constraint c/string-constraint] empty-list c/no-symbol ""))

(def maybe-str  (c/MaybeConstraint str-c empty-list c/no-symbol ""))
(def maybe-int  (c/MaybeConstraint c/int-constraint empty-list c/no-symbol ""))
(def maybe-sym  (c/MaybeConstraint sym-c empty-list c/no-symbol ""))

(def call-value (c/CallValue [str-c c/int-constraint] empty-list c/no-symbol ""))
(def param (c/ParamConstraint 'arity-1 0 empty-list c/no-symbol ""))
(def arg-of (c/ArgOf 'fn-sym 1 empty-list c/no-symbol ""))
(def result-of (c/CallValue c/no-args empty-list c/no-symbol ""))
(def first-of (c/FirstOf 'val-sym empty-list c/no-symbol ""))
(def last-of (c/LastOf 'val-sym empty-list c/no-symbol ""))
(def rest-of (c/RestOf 'val-sym empty-list c/no-symbol ""))
(def butlast-of (c/ButLastOf 'val-sym empty-list c/no-symbol ""))
(def list-from (c/ListFrom 'val-sym empty-list c/no-symbol ""))
(def vect-from (c/VectFrom 'val-sym empty-list c/no-symbol ""))
(def get-first (c/GetFrom [int-0]))
(def set-second (c/SetTo [pos-1] non-0))

(def reified-val (c/ReifiedConstraint
                  10 c/no-symbol {} {}
                  (c/FnConstraint [3]
                                  {3 (c/fn-arity 'arity-1
                                                 (c/ListConstraint [c/top-type c/top-type pos-int]
                                                                   c/no-tail empty-list c/no-symbol "")
                                                 param)}
                                  empty-list c/no-symbol "")
                  empty-list c/no-symbol ""))
(def reified-11 (c/ReifiedConstraint
                 11 c/no-symbol
                 {(c/Field 'field) c/top-type}
                 {(c/Field 'field) c/int-constraint}
                 (c/FnConstraint [] {} empty-list c/no-symbol "")
                 empty-list c/no-symbol ""))
(def reified-12 (c/ReifiedConstraint
                 12 c/no-symbol
                 {(c/Field 'other) c/string-constraint}
                 {(c/Field 'other) str-c}
                 (c/FnConstraint [] {} empty-list c/no-symbol "")
                 empty-list c/no-symbol ""))

(def test-constraints [c/top-type
                       c/bottom-type
                       c/empty-list-constraint
                       c/empty-vect-constraint
                       c/coll-of-any
                       c/list-constraint
                       c/vect-constraint
                       c/seq-constraint
                       c/fn-constraint
                       c/not-container
                       c/inner-type-of-constraint
                       c/substr-constraint
                       c/strbuff-constraint
                       c/string-constraint
                       c/seq-or-str-constraint
                       c/int-constraint
                       c/sym-constraint
                       c/maybe-constraint
                       c/agent-constraint
                       c/promise-constraint
                       c/future-constraint
                       c/opaque-constraint
                       c/arity-constraint
                       ;; c/hash-coll-constraint
                       ;; c/array-constraint
                       ;; c/bitmap-constraint
                       ;; c/hashmap-constraint
                       c/set-constraint

                       (c/ListConstraint [c/top-type pos-int] c/no-tail empty-list c/no-symbol "")
                       (c/VectorConstraint [sym-c pos-int] c/no-tail empty-list c/no-symbol "")

                       int-list
                       int-list-1
                       int-list-2
                       coll-of-int

                       int-vect
                       int-vect-1
                       int-vect-2

                       sym-c

                       substr-c
                       str-c
                       coll-of-str

                       pos-int
                       neg-int
                       pos-1
                       pos-10
                       neg-1
                       neg-10
                       int-0
                       non-0

                       maybe-str
                       maybe-int
                       maybe-sym

                       reified-val
                       reified-11
                       reified-12
                       c/empty-reified

                       first-of
                       last-of
                       rest-of
                       butlast-of
                       list-from
                       vect-from
                       get-first
                       set-second

                       arg-of
                       result-of
                       call-value
                       param])

(defprotocol MatchConstraint
  (exact-match [x y]
    (=* x y)))

(extend-type c/NoValues
  MatchConstraint
  (exact-match [x y]
    (and (=* x y)
         (or (empty? (.constraints x))
             (reduce (.constraints x) (first (.constraints x))
                     (fn [curr c]
                       (and curr
                            (some (.constraints y) (partial = c)))))))))

(defn test [ex1 ex2 file line]
  (either (exact-match ex1 ex2)
          (do
            (print-err 'Failed-at file line
                       "\nexpr 1" ex1
                       "\n\nexpr 2" ex2)
            (abort))))

(defn test-intersect [c1 c2]
  (let [final-1 (c/intersect c1 c2)
        ;; _ (print-err 'final-1 final-1)
        ;; _ (print-err "------")
        final-2 (c/intersect c2 c1)]
    ;; (print-err 'final-2 final-2)
    (either (map (= final-2 final-1)
                 (fn [c]
                   ;; (either (map (instance? c/NoValues c)
                   ;;              (fn [_]
                   ;;                (c/conflicting-assertions c _FILE_ _LINE_)
                   ;;                (print-err 'c c)))
                   ;;         (print-err 'final-c c))
                   final-1))
            (do
              (print-err "FAIL!! 'c/intersect not commutative")
              (print-err 'c1 c1)
              (print-err 'c2 c2)
              (print-err final-1)
              (print-err final-2)))))

(defn drop-until [coll pred]
  (cond (flat-map (first coll) pred)
        coll

        (drop-until (rest coll) pred)))

(def _ (test (c/trim (c/ListConstraint
                        [c/sym-constraint]
                        (c/ListConstraint [c/int-constraint] c/no-tail empty-list c/no-symbol "")
                        empty-list c/no-symbol ""))
             (c/ListConstraint [(c/SymbolConstraint c/no-symbol empty-list c/no-symbol "")
                                c/int-constraint]
                               c/no-tail empty-list c/no-symbol "")
             _FILE_ _LINE_))

(def _ (test (c/trim (c/ListConstraint
                        [c/int-constraint]
                        (c/ListConstraint [c/sym-constraint]
                                          (c/ListConstraint [c/int-constraint]
                                                            c/no-tail empty-list c/no-symbol "")
                                          empty-list c/no-symbol "")
                        empty-list c/no-symbol ""))
             (c/ListConstraint [c/int-constraint
                                (c/SymbolConstraint c/no-symbol empty-list c/no-symbol "")
                                c/int-constraint]
                               c/no-tail empty-list c/no-symbol "")
             _FILE_ _LINE_))

(def _ (test (c/derive (c/MaybeConstraint (c/intersect param c/int-constraint)
                                          empty-list c/no-symbol "")
                       maybe-str)
             (c/NoValues [(c/StrBuffConstraint "buffr" empty-list c/no-symbol "")
                          c/int-constraint])
             _FILE_ _LINE_))

(def _ (test (c/derive (-> param
                           (c/intersect c/maybe-constraint)
                           (c/intersect maybe-str))
                       c/top-type)
             maybe-str
             _FILE_ _LINE_))

(def _ (test (c/derive (-> param
                             (c/intersect c/maybe-constraint)
                             (c/intersect c/int-constraint)
                             (c/intersect maybe-str))
                         c/top-type)
             (c/NoValues [c/int-constraint
                          (c/MaybeConstraint c/top-type empty-list c/no-symbol "")])
             _FILE_ _LINE_))

(def _ (test (c/get-items c/top-type 3)
             [c/top-type c/top-type c/top-type]
             _FILE_ _LINE_))

(def _ (test (c/get-items coll-of-int 2)
             [c/int-constraint c/int-constraint]
             _FILE_ _LINE_))

(def _ (test (c/get-items (c/sum-type [coll-of-int
                                       int-list-1
                                       coll-of-sym])
                          2)
             [(c/SumConstraint
               [c/int-constraint
                (c/SymbolConstraint c/no-symbol empty-list c/no-symbol "")]
               empty-list c/no-symbol "")
              (c/SumConstraint
               [c/int-constraint
                (c/SymbolConstraint c/no-symbol empty-list c/no-symbol "")]
               empty-list c/no-symbol "")]
             _FILE_ _LINE_))

(def _ (test (c/get-items (c/sum-type [coll-of-int
                                       (c/ListConstraint []
                                                         (c/CollectionOf pos-int empty-list c/no-symbol "")
                                                         empty-list c/no-symbol "")
                                       coll-of-sym])
                          2)
             [(c/SumConstraint
               [c/int-constraint
                pos-int
                (c/SymbolConstraint c/no-symbol empty-list c/no-symbol "")]
               empty-list c/no-symbol "")
              (c/SumConstraint
               [c/int-constraint
                (c/SymbolConstraint c/no-symbol empty-list c/no-symbol "")
                pos-int]
               empty-list c/no-symbol "")]
             _FILE_ _LINE_))

(def _ (test (c/get-items int-list-1 2)
             []
             _FILE_ _LINE_))

(def _ (test (c/get-items int-vect-1 2)
             []
             _FILE_ _LINE_))

(def _ (test (c/get-items (c/sum-type [int-list-1
                                       (c/ListConstraint [c/sym-constraint] c/no-tail empty-list c/no-symbol "")])
                          2)
             []
             _FILE_ _LINE_))

(def _ (test (c/intersect int-list-1 c/coll-of-any)
             int-list-1
             _FILE_ _LINE_))

(def _ (test (c/intersect int-list-2
                          (c/ListConstraint [c/int-constraint c/sym-constraint]
                                            c/no-tail empty-list c/no-symbol ""))
             (c/NoValues [(c/SymbolConstraint c/no-symbol empty-list c/no-symbol "")
                          c/int-constraint])
             _FILE_ _LINE_))

(def _ (test (c/intersect int-vect-2
                          (c/VectorConstraint [c/int-constraint c/sym-constraint]
                                              c/no-tail empty-list c/no-symbol ""))
             (c/NoValues [(c/SymbolConstraint c/no-symbol empty-list c/no-symbol "")
                          c/int-constraint])
             _FILE_ _LINE_))

(def _ (test (c/intersect (c/AgentConstraint c/sym-constraint empty-list c/no-symbol "")
                          (c/AgentConstraint c/int-constraint empty-list c/no-symbol ""))
             (c/NoValues [(c/SymbolConstraint c/no-symbol empty-list c/no-symbol "")
                          c/int-constraint])
             _FILE_ _LINE_))

(def _ (test (c/intersect (c/PromiseConstraint c/sym-constraint empty-list c/no-symbol "")
                          (c/PromiseConstraint c/int-constraint empty-list c/no-symbol ""))
             (c/NoValues [(c/SymbolConstraint c/no-symbol empty-list c/no-symbol "")
                          c/int-constraint])
             _FILE_ _LINE_))

(def _ (test (c/intersect coll-of-int
                          (c/PromiseConstraint pos-int empty-list c/no-symbol ""))
             (c/PromiseConstraint pos-int empty-list c/no-symbol "")
             _FILE_ _LINE_))

(def _ (test (c/intersect (c/PromiseConstraint param empty-list c/no-symbol "")
                          (c/PromiseConstraint c/top-type empty-list c/no-symbol ""))
             (c/PromiseConstraint param empty-list c/no-symbol "")
             _FILE_ _LINE_))

(def computed-bottom (c/ComputedConstraint [param c/int-constraint c/string-constraint]
                                           empty-list c/no-symbol ""))

(def _ (test (cata c/find-bottom computed-bottom)
             (c/NoValues [c/int-constraint
                          (c/StrBuffConstraint c/no-string empty-list c/no-symbol "")])
             _FILE_ _LINE_))

(def _ (test (cata c/find-bottom (.items c/list-constraint [computed-bottom]))
             (c/NoValues [c/int-constraint
                          (c/StrBuffConstraint c/no-string empty-list c/no-symbol "")])
             _FILE_ _LINE_))

(def _ (test (cata c/find-bottom (.tail-c c/vect-constraint computed-bottom))
             (c/NoValues [c/int-constraint
                          (c/StrBuffConstraint c/no-string empty-list c/no-symbol "")])
             _FILE_ _LINE_))

(def _ (test (cata c/find-bottom (.contents c/coll-of-any computed-bottom))
             (c/NoValues [c/int-constraint
                          (c/StrBuffConstraint c/no-string empty-list c/no-symbol "")])
             _FILE_ _LINE_))

(def _ (test (cata c/find-bottom (c/SumConstraint [computed-bottom]
                                                  empty-list c/no-symbol ""))
             (c/NoValues [c/int-constraint
                          (c/StrBuffConstraint c/no-string empty-list c/no-symbol "")])
             _FILE_ _LINE_))

(def _ (test (cata c/find-bottom (.arities c/fn-constraint
                                           {1 (c/fn-arity c/no-symbol
                                                          (.items c/list-constraint [computed-bottom])
                                                          c/int-constraint)}))
             (c/NoValues [c/int-constraint
                          (c/StrBuffConstraint c/no-string empty-list c/no-symbol "")])
             _FILE_ _LINE_))

(def _ (test (cata c/find-bottom (.arities c/fn-constraint
                                           {1 (c/fn-arity c/no-symbol
                                                          (.items c/list-constraint [c/int-constraint])
                                                          computed-bottom)}))
             (c/NoValues [c/int-constraint
                          (c/StrBuffConstraint c/no-string empty-list c/no-symbol "")])
             _FILE_ _LINE_))

(def _ (test (cata c/find-bottom
                   (.invoke-fn c/arity-constraint
                               (.arities c/fn-constraint
                                         {1 (c/fn-arity c/no-symbol
                                                        (.items c/list-constraint [computed-bottom])
                                                        c/int-constraint)})))
             (c/NoValues [c/int-constraint
                          (c/StrBuffConstraint c/no-string empty-list c/no-symbol "")])
             _FILE_ _LINE_))

(def _ (test (c/intersect c/fn-constraint
                          (c/FnConstraint [1]
                                          {1 (c/fn-arity c/no-symbol int-list-1 c/top-type)}
                                          empty-list c/no-symbol ""))
             (c/FnConstraint [1]
                             {1 (c/fn-arity c/no-symbol int-list-1 c/top-type)}
                             empty-list c/no-symbol "")
             _FILE_ _LINE_))

(def _ (test (c/intersect (c/FnConstraint [1]
                                          {1 (c/fn-arity c/no-symbol int-list-1 c/top-type)}
                                          empty-list c/no-symbol "")
                          (c/FnConstraint [1]
                                          {1 (c/fn-arity c/no-symbol
                                                         (c/ListConstraint [c/string-constraint]
                                                                           c/no-tail empty-list c/no-symbol "")
                                                         c/top-type)}
                                          empty-list c/no-symbol ""))
             (c/NoValues
              [(c/FnConstraint
                [1]
                {1 (c/fn-arity 'c/no-symbol
                               (c/ListConstraint
                                [(c/SumConstraint
                                  [(c/StrBuffConstraint c/no-string empty-list c/no-symbol "")

                                   (c/SubStrConstraint c/no-string empty-list c/no-symbol "")]
                                  empty-list c/no-symbol "")]
                                c/no-tail empty-list c/no-symbol "")
                               c/top-type)}
                empty-list c/no-symbol "")
               (c/FnConstraint
                [1]
                {1 (c/fn-arity 'c/no-symbol
                               (c/ListConstraint
                                [c/int-constraint]
                                c/no-tail empty-list c/no-symbol "")
                               c/top-type)}
                empty-list c/no-symbol "")])
             _FILE_ _LINE_))

(def _ (test (c/intersect (-> c/fn-constraint
                              (.required-arities [3])
                              (.arities (select-keys (.arities c/fn-constraint) [3])))
                          (c/FnConstraint [1]
                                          {1 (c/fn-arity c/no-symbol int-list-1 c/top-type)}
                                          empty-list c/no-symbol ""))
             (c/NoValues
              [(c/FnConstraint
                [1]
                {1 (c/fn-arity 'c/no-symbol
                               (c/ListConstraint
                                [c/int-constraint]
                                c/no-tail empty-list c/no-symbol "")
                               c/top-type)}
                empty-list c/no-symbol "")
               (c/FnConstraint
                [3]
                {3 (c/fn-arity 'c/no-symbol
                               (c/ListConstraint [c/top-type
                                                  c/top-type
                                                  c/top-type]
                                                 c/no-tail empty-list c/no-symbol "")
                               c/top-type)}
                empty-list c/no-symbol "")])
             _FILE_ _LINE_))

(def _ (test (c/intersect (c/FnConstraint []
                                          {1 (c/fn-arity c/no-symbol int-list-1 c/int-constraint)}
                                          empty-list c/no-symbol "")
                          (c/FnConstraint []
                                          {1 (c/fn-arity c/no-symbol int-list-1 c/sym-constraint)}
                                          empty-list c/no-symbol ""))
             (c/NoValues
              [(c/FnConstraint
                [] {1 (c/fn-arity
                       'c/no-symbol
                       (c/ListConstraint
                        [c/int-constraint]
                        c/no-tail empty-list c/no-symbol "")
                       (c/SymbolConstraint c/no-symbol empty-list c/no-symbol ""))}
                empty-list c/no-symbol "")
               (c/FnConstraint
                [] {1 (c/fn-arity 'c/no-symbol
                                  (c/ListConstraint
                                   [c/int-constraint]
                                   c/no-tail empty-list c/no-symbol "")
                                  c/int-constraint)}
                empty-list c/no-symbol "")])
             _FILE_ _LINE_))

(def _ (test (c/intersect (assoc-in reified-11 [.fields (c/Field 'field)] c/int-constraint)
                          (assoc-in reified-11 [.fields (c/Field 'field)] c/sym-constraint))
             (c/NoValues [(c/SymbolConstraint c/no-symbol empty-list c/no-symbol "")
                          c/int-constraint])
        _FILE_ _LINE_))

(def _ (test (c/intersect reified-val
                          arg-of)
             pos-int
        _FILE_ _LINE_))

(def _ (test (c/intersect arg-of
                          (c/SumConstraint
                           [reified-val
                            (c/FnConstraint []
                                            {2 (c/fn-arity c/no-symbol
                                                           (c/ListConstraint [c/top-type coll-of-sym]
                                                                             c/no-tail empty-list c/no-symbol "")
                                                           c/top-type)}
                                            empty-list c/no-symbol "")]
                           empty-list c/no-symbol ""))
             (c/SumConstraint [pos-int coll-of-sym] empty-list c/no-symbol "")
        _FILE_ _LINE_))

(def _ (test (c/intersect result-of
                          (c/SumConstraint
                           [(.invoke-fn reified-val
                                        (c/FnConstraint [1]
                                                        {1 (c/fn-arity c/no-symbol
                                                                       (c/ListConstraint [c/top-type] c/no-tail
                                                                                         empty-list c/no-symbol "")
                                                                       pos-int)}
                                                        empty-list c/no-symbol ""))
                            (c/FnConstraint []
                                            {2 (c/fn-arity c/no-symbol
                                                           (c/ListConstraint [c/top-type coll-of-sym]
                                                                             c/no-tail empty-list c/no-symbol "")
                                                           c/sym-constraint)}
                                            empty-list c/no-symbol "")]
                           empty-list c/no-symbol ""))
             (c/SumConstraint [pos-int c/sym-constraint] empty-list c/no-symbol "")
        _FILE_ _LINE_))

(def _ (test (c/intersect first-of c/empty-list-constraint)
             c/maybe-constraint
             _FILE_ _LINE_))

(def _ (test (c/intersect first-of int-list-1)
             maybe-int
             _FILE_ _LINE_))

(def _ (test (c/intersect int-vect-1 first-of)
             maybe-int
             _FILE_ _LINE_))

(def _ (test (c/intersect last-of c/empty-vect-constraint)
             c/maybe-constraint
             _FILE_ _LINE_))

(def _ (test (c/intersect last-of int-list-1)
             maybe-int
             _FILE_ _LINE_))

(def _ (test (c/intersect int-vect-1 last-of)
             maybe-int
             _FILE_ _LINE_))

(def _ (test (c/intersect rest-of c/empty-vect-constraint)
             c/empty-vect-constraint
             _FILE_ _LINE_))

(def _ (test (c/intersect rest-of int-list-1)
             c/empty-list-constraint
             _FILE_ _LINE_))

(def _ (test (c/intersect int-vect-2 rest-of)
             int-vect-1
             _FILE_ _LINE_))

(def _ (test (c/intersect (c/ListConstraint [c/int-constraint c/sym-constraint]
                                            c/no-tail empty-list c/no-symbol "")
                          butlast-of)
             int-list-1
             _FILE_ _LINE_))

(def _ (test (c/intersect int-vect-2
                          list-from)
             int-list-2
             _FILE_ _LINE_))

(def _ (test (c/intersect int-list-2
                          vect-from)
             int-vect-2
             _FILE_ _LINE_))

(def _ (test (c/intersect (c/CallValue [pos-int str-c] empty-list c/no-symbol "")
                          (c/FnConstraint [2]
                                          {2 (c/fn-arity 'arity-1 int-list-2
                                                         (c/intersect param
                                                                      c/int-constraint))}
                                          empty-list c/no-symbol ""))
             (c/NoValues [c/int-constraint
                          (c/StrBuffConstraint "buffr" empty-list c/no-symbol "")])
             _FILE_ _LINE_))

(def _ (test (c/intersect (c/CallValue [str-c c/int-constraint] empty-list c/no-symbol "")
                          reified-val)
             reified-val
             _FILE_ _LINE_))

(def _ (test (c/intersect (c/CallValue [str-c int-vect-2] empty-list c/no-symbol "")
                          reified-val)
             (c/NoValues [(c/IntegerConstraint c/no-int 2147483647 1 empty-list c/no-symbol "")
                          (c/VectorConstraint
                           [c/int-constraint
                            c/int-constraint]
                           c/no-tail empty-list c/no-symbol "")])
             _FILE_ _LINE_))

(def _ (test (c/intersect (c/CallValue [c/string-constraint] empty-list c/no-symbol "")
                          (c/FnConstraint []
                                          {1 (c/fn-arity 'arity-1
                                                         (c/ListConstraint [str-c]
                                                                           c/no-tail empty-list c/no-symbol "")
                                                         param)}
                                          empty-list c/no-symbol ""))
             str-c
             _FILE_ _LINE_))

(def _ (test (c/intersect (c/CallValue [str-c] empty-list c/no-symbol "")
                          (.invoke-fn reified-val
                                      (c/FnConstraint
                                       [2]
                                       {2 (c/fn-arity 'arity-1
                                                      (c/ListConstraint [c/top-type pos-int]
                                                                        c/no-tail empty-list c/no-symbol "")
                                                      (.param-index param 1))}
                                       empty-list c/no-symbol "")))
             (c/NoValues [(c/IntegerConstraint c/no-int 2147483647 1 empty-list c/no-symbol "")
                          (c/StrBuffConstraint "buffr" empty-list c/no-symbol "")])
             _FILE_ _LINE_))

(def _ (test (c/intersect c/int-constraint
                          c/inner-type-of-constraint)
             (c/NoValues [c/int-constraint c/empty-reified])
             _FILE_ _LINE_))

(def _ (test (c/intersect c/empty-list-constraint
                          c/inner-type-of-constraint)
             c/top-type
             _FILE_ _LINE_))

(def _ (test (c/intersect maybe-int
                          c/inner-type-of-constraint)
             c/int-constraint
             _FILE_ _LINE_))

(def _ (test (c/intersect (c/ListConstraint [c/top-type pos-int] c/no-tail empty-list c/no-symbol "")
                          c/inner-type-of-constraint)
             pos-int
             _FILE_ _LINE_))

(def _ (test (c/intersect (c/VectorConstraint [sym-c pos-int] c/no-tail empty-list c/no-symbol "")
                          c/inner-type-of-constraint)
             (c/sum-type [sym-c pos-int])
             _FILE_ _LINE_))

(def _ (test (c/intersect get-first
                          c/list-constraint)
             c/top-type
             _FILE_ _LINE_))

(def _ (test (c/intersect (c/GetFrom [pos-1])
                          (c/ListConstraint [c/int-constraint pos-int]
                                            c/no-tail empty-list c/no-symbol ""))
             pos-int
             _FILE_ _LINE_))

(def _ (test (c/intersect (c/VectorConstraint [pos-int str-c] c/no-tail empty-list c/no-symbol "")
                          (c/GetFrom [pos-1]))
             str-c
             _FILE_ _LINE_))

(def _ (test (c/intersect (assoc-in reified-11 [.fields (c/Field 'field)] pos-int)
                          (c/GetFrom [(c/Field 'field)]))
             pos-int
             _FILE_ _LINE_))

(def _ (test (c/intersect (c/GetFrom [(c/Field 'field)])
                          reified-11)
             c/int-constraint
             _FILE_ _LINE_))


(def _ (test (c/intersect (c/GetFrom [(c/Field 'field) pos-1])
                          (assoc-in reified-11 [.fields (c/Field 'field)]
                                    (c/VectorConstraint [pos-int str-c] c/no-tail
                                                        empty-list c/no-symbol "")))
             str-c
             _FILE_ _LINE_))

(def _ (test (c/intersect (c/GetFrom [pos-1 (c/Field 'other)])
                          (c/VectorConstraint [pos-int
                                               (assoc-in reified-12 [.fields (c/Field 'other)] str-c)]
                                              c/no-tail empty-list c/no-symbol ""))
             str-c
             _FILE_ _LINE_))

(def _ (test (c/intersect (c/GetFrom [pos-1 (c/Field 'missing-field)])
                          (c/VectorConstraint [pos-int
                                               (assoc-in reified-12 [.fields (c/Field 'other)] str-c)]
                                              c/no-tail empty-list c/no-symbol ""))
             (c/NoValues
              [(assoc-in reified-12 [.fields (c/Field 'other)] str-c)
               c/empty-reified])
             _FILE_ _LINE_))

(def _ (test (c/intersect set-second
                          (c/ListConstraint [pos-int str-c]
                                            c/no-tail empty-list c/no-symbol ""))
             (c/intersect set-second
                          (c/ListConstraint [pos-int non-0]
                                            c/no-tail empty-list c/no-symbol ""))
             _FILE_ _LINE_))

(def _ (test (c/intersect (.items int-list [pos-int])
                          set-second)
             (.items int-list [pos-int non-0])
             _FILE_ _LINE_))

(def _ (test (c/intersect set-second
                          (c/ListConstraint [pos-int] c/no-tail empty-list c/no-symbol ""))
             (c/NoValues [(c/ListConstraint [pos-int] c/no-tail empty-list c/no-symbol "")
                          c/empty-reified])
             _FILE_ _LINE_))

(def _ (test (c/intersect (.items int-vect [pos-int])
                          set-second)
             (.items int-vect [pos-int non-0])
             _FILE_ _LINE_))

(def _ (test (c/intersect set-second
                          (c/VectorConstraint [pos-int] c/no-tail empty-list c/no-symbol ""))
             (c/NoValues [(c/VectorConstraint [pos-int] c/no-tail empty-list c/no-symbol "")
                          c/empty-reified])
             _FILE_ _LINE_))

(def _ (test (c/intersect (c/SetTo [int-0 int-0] non-0)
                          (c/VectorConstraint [(c/ListConstraint [pos-int] c/no-tail empty-list c/no-symbol "")]
                                              c/no-tail empty-list c/no-symbol ""))
             (c/VectorConstraint [(c/ListConstraint [non-0] c/no-tail empty-list c/no-symbol "")]
                                 c/no-tail empty-list c/no-symbol "")
             _FILE_ _LINE_))

(def _ (test (c/intersect (c/SetTo [int-0 pos-2] non-0)
                          (c/VectorConstraint [(c/ListConstraint [pos-int] c/no-tail empty-list c/no-symbol "")]
                                              c/no-tail empty-list c/no-symbol ""))
             (c/NoValues [(c/ListConstraint [pos-int] c/no-tail empty-list c/no-symbol "")
                          c/empty-reified])
             _FILE_ _LINE_))

(def _ (test (c/intersect reified-11
                          (c/SetTo [(c/Field 'field)] pos-int))
             (assoc-in reified-11 [.fields (c/Field 'field)] pos-int) 
             _FILE_ _LINE_))

(def nested-reified (c/intersect reified-11 (c/SetTo [(c/Field 'field)] reified-12)))

(def _ (test nested-reified
             (assoc-in reified-11 [.fields (c/Field 'field)] reified-12) 
             _FILE_ _LINE_))

(def _ (test (c/intersect nested-reified
                          (c/SetTo [(c/Field 'field) (c/Field 'other)]
                                   substr-c))
             (assoc-in nested-reified [.fields (c/Field 'field) .fields (c/Field 'other)] substr-c) 
             _FILE_ _LINE_))

(def reified-vect (c/VectorConstraint [reified-12] c/no-tail empty-list c/no-symbol ""))
(def reified-list (c/ListConstraint [] (c/CollectionOf
                                        (c/intersect reified-11
                                                     (c/SetTo [(c/Field 'field)] reified-vect))
                                        empty-list c/no-symbol "")
                                    empty-list c/no-symbol ""))

(def _ (test (c/intersect reified-list
                          (c/SetTo [pos-1 (c/Field 'field) int-0 (c/Field 'other)]
                                   substr-c))
             (c/ListConstraint
              [(c/ReifiedConstraint 11  (symbol "c/no-symbol")
                                    {(c/Field (symbol "field")) c/top-type}
                                    {(c/Field (symbol "field")) reified-vect}
                                    (c/FnConstraint [] {} empty-list c/no-symbol "")
                                    empty-list  c/no-symbol "")
               (c/ReifiedConstraint 11  (symbol "c/no-symbol")
                                    {(c/Field (symbol "field")) c/top-type}
                                    {(c/Field (symbol "field"))
                                     (c/VectorConstraint [(c/intersect reified-12
                                                                       (c/SetTo [(c/Field 'other)] substr-c))]
                                                         c/no-tail empty-list c/no-symbol "")}
                                    (c/FnConstraint [] {} empty-list c/no-symbol "")
                                    empty-list  c/no-symbol "")]
              (c/CollectionOf
               (c/ReifiedConstraint 11  (symbol "c/no-symbol")
                                    {(c/Field (symbol "field")) c/top-type}
                                    {(c/Field (symbol "field")) reified-vect}
                                    (c/FnConstraint [] {} empty-list c/no-symbol "")
                                    empty-list  c/no-symbol "")
               empty-list c/no-symbol "")
              empty-list c/no-symbol "")
             _FILE_ _LINE_))

(def _ (test (c/intersect reified-list
                          (c/SetTo [pos-1 (c/Field 'field) int-0 (c/Field 'field)]
                                   substr-c))
             (c/NoValues [reified-12 c/empty-reified])
             _FILE_ _LINE_))

(def _ (test (c/intersect reified-list
                          (c/SetTo [pos-1 (c/Field 'field) pos-1 (c/Field 'other)]
                                   substr-c))
             (c/NoValues [reified-vect c/empty-reified])
             _FILE_ _LINE_))

(def _ (test (c/intersect c/coll-of-any
                          (c/FnConstraint [1]
                                          {1 (c/fn-arity c/no-symbol int-list-1 pos-1)}
                                          empty-list c/no-symbol ""))
             pos-1
             _FILE_ _LINE_))

(def _ (test (c/intersect coll-of-sym
                          (c/FnConstraint [1]
                                          {1 (c/fn-arity c/no-symbol int-list-1 pos-1)}
                                          empty-list c/no-symbol ""))
             (c/NoValues [c/sym-constraint pos-1])
             _FILE_ _LINE_))

(def _ (for [c1 test-constraints
             c2 (drop-until test-constraints (partial identical c1))
             c3 (drop-until test-constraints (partial identical c2))]
         (let [c12 (test-intersect c1 c2)
               c23 (test-intersect c2 c3)]
           (test-intersect c12 c23))))

(main [_]
  (print-err 'testing-constraints))
