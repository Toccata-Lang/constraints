
;; regression tests for constraints.toc

(add-ns p (module "private.toc"))
(add-ns c (module "constraints.toc"))

(def int-list (p/ListConstraint [] c/int-constraint empty-list p/no-symbol ""))
(def int-list-1 (p/ListConstraint [c/int-constraint] p/no-tail empty-list p/no-symbol ""))
(def int-list-2 (p/ListConstraint [c/int-constraint c/int-constraint] p/no-tail empty-list p/no-symbol ""))
(def coll-of-int (p/CollectionOf c/int-constraint empty-list p/no-symbol ""))

(def int-vect (p/ListConstraint [] c/int-constraint empty-list p/no-symbol ""))
(def int-vect-1 (p/ListConstraint [c/int-constraint] p/no-tail empty-list p/no-symbol ""))
(def int-vect-2 (p/ListConstraint [c/int-constraint c/int-constraint] p/no-tail empty-list p/no-symbol ""))

(def sym-c (p/SymbolConstraint 'this-sym empty-list p/no-symbol ""))
(def substr-c (p/SubStrConstraint "strng" empty-list p/no-symbol ""))
(def str-c (p/StrBuffConstraint "buffr" empty-list p/no-symbol ""))

(def hash-coll-constraint (p/HashMapConstraint p/HashCollisionNodeType {}
                                               c/top-type c/top-type empty-list p/no-symbol ""))
(def array-constraint (p/HashMapConstraint p/ArrayNodeType {} c/top-type c/top-type empty-list p/no-symbol ""))
(def bitmap-constraint (p/HashMapConstraint p/BitmapIndexedType {} c/top-type c/top-type empty-list p/no-symbol ""))

(def pos-int (p/IntegerConstraint p/no-int int-max 1 empty-list p/no-symbol ""))
(def neg-int (p/IntegerConstraint p/no-int -1 int-min empty-list p/no-symbol ""))
(def pos-1 (p/IntegerConstraint 1 int-max int-min empty-list p/no-symbol ""))
(def pos-10 (p/IntegerConstraint 10 int-max int-min empty-list p/no-symbol ""))
(def neg-1 (p/IntegerConstraint -1 int-max int-min empty-list p/no-symbol ""))
(def neg-10 (p/IntegerConstraint -10 int-max int-min empty-list p/no-symbol ""))

(def maybe-str  (p/MaybeConstraint c/strbuff-constraint empty-list p/no-symbol ""))
(def maybe-int  (p/MaybeConstraint c/substr-constraint empty-list p/no-symbol ""))
(def maybe-sym  (p/MaybeConstraint sym-c empty-list p/no-symbol ""))

;; (def agent-constraint (AgentConstraint top-type empty-list p/no-symbol ""))
;; (def promise-constraint (PromiseConstraint top-type empty-list p/no-symbol ""))
;; (def future-constraint (FutureConstraint empty-list p/no-symbol ""))
;; (def opaque-constraint (OpaqueConstraint empty-list p/no-symbol ""))
;; (def arity-constraint (ReifiedConstraint FnArityType {} 'FnArity (.arities fn-constraint {})
;;                                          empty-list p/no-symbol ""))

(def test-constraints [c/top-type
                       c/bottom-type
                       c/empty-list-constraint
                       c/empty-vect-constraint
                       c/coll-of-any
                       c/list-constraint
                       c/vect-constraint
                       c/seq-constraint
                       c/fn-constraint
                       c/not-container
                       c/type-of-constraint
                       c/inner-type-of-constraint
                       c/sym-constraint
                       c/substr-constraint
                       c/strbuff-constraint
                       c/string-constraint
                       c/seq-or-str-constraint
                       c/hash-coll-constraint
                       c/array-constraint
                       c/bitmap-constraint
                       c/hashmap-constraint
                       c/int-constraint
                       c/maybe-constraint
                       c/set-constraint
                       c/agent-constraint
                       c/promise-constraint
                       c/future-constraint
                       c/opaque-constraint
                       c/arity-constraint

                       int-list
                       int-list-1
                       int-list-2
                       coll-of-int

                       int-vect
                       int-vect-1
                       int-vect-2

                       sym-c
                       substr-c
                       str-c

                       pos-int
                       neg-int
                       pos-1
                       pos-10
                       neg-1
                       neg-10

                       maybe-str
                       maybe-int
                       maybe-sym
                       ])

(defn test-intersect [c1 c2]
  (let [final-1 (c/intersect c1 c2)
        ;; _ (print-err 'final-1 final-1)
        ;; _ (print-err "------")
        final-2 (c/intersect c2 c1)]
    ;; (print-err 'final-2 final-2)
    (either (map (= final-2 final-1)
                 (fn [c]
                   ;; (either (map (instance? c/NoValues c)
                   ;;              (fn [_]
                   ;;                (c/conflicting-assertions c _FILE_ _LINE_)
                   ;;                (print-err 'c c)))
                   ;;         (print-err 'final-c c))
                   final-1))
            (do
              (print-err "FAIL!! 'c/intersect not commutative")
              (print-err 'c1 c1)
              (print-err 'c2 c2)
              (print-err final-1)
              (print-err final-2)))))

(defn drop-until [coll pred]
  (cond (flat-map (first coll) pred)
        coll

        (drop-until (rest coll) pred)))

(def _ (for [c1 test-constraints
             c2 (drop-until test-constraints (partial = c1))]
         (test-intersect c1 c2)))

(main [_]
  (print-err 'testing-constraints))
