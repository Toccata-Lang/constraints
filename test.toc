
;; regression tests for constraints.toc

(add-ns c (module "constraints.toc"))

(def type-of (c/TypeOfConstraint (c/tag 'arity-1) empty-list c/no-symbol ""))
(def coll-of-int (c/CollectionOf c/int-constraint empty-list c/no-symbol ""))
(def int-list (c/list-c [] coll-of-int))
(def int-list-1 (c/list-c [c/int-constraint]))
(def int-fn (c/FnConstraint [1]
                            {1 (c/fn-arity (c/tag "")
                                           (c/list-c [c/int-constraint])
                                           c/top-type)}
                            empty-list c/no-symbol ""))
(def variadic-fn (c/fn-c []
                         {c/variadic (c/fn-arity
                                      (c/tag 'fn-arity111)
                                      (c/multi [c/list-constraint
                                                (c/param (c/tag 'fn-arity111) 0)])
                                      ;; returns
                                      c/top-type)}))
(def int-list-2 (c/list-c [c/int-constraint c/int-constraint]))

(def int-vect (c/vect-c [] coll-of-int))
(def int-vect-1 (c/vect-c [c/int-constraint]))
(def int-vect-2 (c/vect-c [c/int-constraint c/int-constraint]))

(def sym-c (c/SymConstraint 'this-sym))
(def coll-of-sym (c/CollectionOf c/sym-constraint empty-list c/no-symbol ""))

(def substr-c (c/SubStrConstraint "strng" empty-list c/no-symbol ""))
(def str-c (c/StrConstraint "buffr"))
(def coll-of-str (c/CollectionOf c/string-constraint empty-list c/no-symbol ""))

(def pos-int (c/IntConstraint c/no-int int-max 1))
(def neg-int (c/IntConstraint c/no-int -1 int-min))
(def pos-1 (c/IntConstraint 1 int-max int-min))
(def pos-2 (c/IntConstraint 2 int-max int-min))
(def pos-10 (c/IntConstraint 10 int-max int-min))
(def neg-1 (c/IntConstraint -1 int-max int-min))
(def neg-10 (c/IntConstraint -10 int-max int-min))
(def int-0 (c/IntConstraint 0 int-max int-min))
(def non-0 (c/SumConstraint [pos-int neg-int] empty-list c/no-symbol ""))

(def int-or-str (c/SumConstraint [c/int-constraint c/string-constraint] empty-list c/no-symbol ""))

(def maybe-str  (c/MaybeConstraint str-c empty-list c/no-symbol ""))
(def maybe-int  (c/MaybeConstraint c/int-constraint empty-list c/no-symbol ""))
(def maybe-sym  (c/MaybeConstraint sym-c empty-list c/no-symbol ""))

(def param (c/param (c/tag 'arity-1) 0))
(def maybe-param  (c/MaybeConstraint param empty-list c/no-symbol ""))
(def empty-seq (c/seq-c []))

(def lf "\n")
(def lflf "\n\n")

(def reified-val (c/ReifiedConstraint
                  10 c/no-symbol {} {}
                  (c/fn-c [3]
                          {3 (c/fn-arity (c/tag 'arity-1)
                                         (c/list-c [c/top-type c/top-type pos-int])
                                         param)})
                  empty-list c/no-symbol ""))
(def reified-11 (c/ReifiedConstraint
                 11 c/no-symbol
                 {(c/Field (c/tag 'field)) c/top-type}
                 {(c/Field (c/tag 'field)) c/int-constraint}
                 (c/FnConstraint [] {} empty-list c/no-symbol "")
                 empty-list c/no-symbol ""))
(def reified-12 (c/ReifiedConstraint
                 12 c/no-symbol
                 {(c/Field (c/tag 'other)) c/string-constraint}
                 {(c/Field (c/tag 'other)) str-c}
                 (c/FnConstraint [] {} empty-list c/no-symbol "")
                 empty-list c/no-symbol ""))

(def test-constraints [c/top-type
                       c/bottom-type
                       c/empty-list-constraint
                       c/empty-vect-constraint
                       c/coll-of-any
                       c/list-constraint
                       c/vect-constraint
                       c/seq-constraint
                       c/fn-constraint
                       c/not-container
                       c/substr-constraint
                       c/strbuff-constraint
                       c/string-constraint
                       c/seq-or-str-constraint
                       c/int-constraint
                       c/sym-constraint
                       c/maybe-constraint
                       c/nothing-constraint
                       c/agent-constraint
                       c/promise-constraint
                       c/future-constraint
                       c/opaque-constraint
                       c/arity-constraint
                       ;; c/hash-coll-constraint
                       ;; c/array-constraint
                       ;; c/bitmap-constraint
                       ;; c/hashmap-constraint
                       c/set-constraint

                       empty-seq
                       c/no-tail
                       (c/list-c [c/top-type pos-int])
                       (c/vect-c [sym-c pos-int])
                       ;; TODO: check this out sometime
                       ;; type-of
                       int-fn
                       variadic-fn

                       int-list
                       int-list-1
                       int-list-2
                       coll-of-int

                       int-vect
                       int-vect-1
                       int-vect-2

                       sym-c

                       substr-c
                       str-c
                       coll-of-str

                       pos-int
                       neg-int
                       pos-1
                       pos-10
                       neg-1
                       neg-10
                       int-0
                       non-0

                       maybe-str
                       maybe-int
                       maybe-sym

                       reified-val
                       reified-11
                       reified-12
                       c/no-contents
                       ;; TODO: put back
                       ;; c/empty-reified
                       (c/ProtoImpls (c/tag 'reverse)
                                     (c/fn-c []
                                             {1 (c/fn-arity
                                                 (c/tag 'reverse)
                                                 (c/list-c [(c/param (c/tag 'reverse) 0)])
                                                 ;; returns
                                                 c/top-type)})

                                     {})
                       param])

(defprotocol MatchConstraint
  (exact-match [x y]
    (=* x y)))

(extend-type c/NoValues
  MatchConstraint
  (exact-match [x y]
    (and (=* x y)
         (or (empty? (.constraints x))
             (reduce (.constraints x) (first (.constraints x))
                     (fn [curr c]
                       (and curr
                            (some (.constraints y) (partial = c)))))))))

(def lflf "\n\n")

(defn test [ex1 ex2 file line]
  (either (exact-match ex1 ex2)
          (do
            (print-err 'Failed-at file line
                       "\nexpr 1" ex1
                       lflf"expr 2" ex2)
            (abort)))
  ;; (print-err 'testing line 'passed)
  )

(defn test-intersect [c1 c2]
  (let [final-1 (c/intersect c1 c2)
        ;; _ (print-err 'final-1 final-1)
        ;; _ (print-err "------")
        final-2 (c/intersect c2 c1)]
    ;; (print-err 'final-2 final-2)
    (either (map (= final-2 final-1)
                 (fn [c]
                   ;; (either (map (instance? c/NoValues c)
                   ;;              (fn [_]
                   ;;                (c/conflicting-assertions c _FILE_ _LINE_)
                   ;;                (print-err 'c c)))
                   ;;         (print-err 'final-c c))
                   final-1))
            (do
              (print-err "FAIL!! 'c/intersect not commutative"
                         lflf 'c1 (type-name c1) c1
                         lflf 'c2 (type-name c2) c2
                         lflf final-1
                         lflf final-2)))))

(defn drop-until [coll pred]
  (cond (flat-map (first coll) pred)
        coll

        (drop-until (rest coll) pred)))

(defn reify-c
  ([c args]
   (c/reify-type-constraint c (.arity-id c) args (c/Location _FILE_ _LINE_)))
  ([c arity-id args]
   (c/reify-type-constraint c arity-id args (c/Location _FILE_ _LINE_))))

(def _ (test (c/is-param type-of)
             (maybe type-of)
             _FILE_ _LINE_))

(def _ (test (c/do-call-value type-of c/no-args empty-list)
             [(c/type-op c/call-value-op type-of c/no-args)
              c/no-args]
             _FILE_ _LINE_))

;; (def _ (test (c/ib2 (c/multi [c/top-type
;;                               (c/NoValues [c/int-constraint
;;                                            (c/SymConstraint 'a)])]))
;;              (c/is-bottom (c/multi [c/top-type
;;                                     (c/NoValues [c/int-constraint
;;                                                  (c/SymConstraint 'a)])]))
;;              _FILE_ _LINE_))

;; (def _ (let [c (c/sum-c [(c/param (c/tag 'fn-arity143) 1)
;;                          (c/param (c/tag 'fn-arity143) 1)])]
;;          (test (c/is-param c)
;;                (c/some-constraint c/find-param c)
;;                _FILE_ _LINE_)))

(def _ (test (c/intersect (.required-arities c/fn-constraint [1])
                          (c/ProtoImpls
                           (c/tag 'reverse)
                           (c/fn-c []
                                   {1 (c/fn-arity (c/tag 'reverse)
                                                  (c/list-c [(c/param (c/tag 'reverse) 0)])
                                       ;; returns
                                       c/top-type)})

                           {}))
             (c/multi [(c/ProtoImpls
                        (c/tag 'reverse)
                        (c/fn-c []
                                {1 (c/fn-arity
                                    (c/tag 'reverse)
                                    (c/list-c [(c/param (c/tag 'reverse) 0)])
                                    ;; returns
                                    c/top-type)})

                        {})
                       (.required-arities c/fn-constraint [1])])
             _FILE_ _LINE_))

(def _ (test (c/type-op c/get-from-op
                        (c/ReifiedConstraint 0 (c/tag "field 'param-consts' required") {}
                                             {(c/Field (c/tag ".param-consts")) c/top-type}
                                             (c/fn-c [] {}) empty-list c/no-symbol "")
                        [(c/Field (c/tag ".result-const"))])
             c/top-type
             _FILE_ _LINE_))

(def _ (test (c/type-op c/set-to-op
                        (c/ReifiedConstraint 0 (c/tag "field 'param-consts' required") {}
                                             {(c/Field (c/tag ".param-consts")) c/top-type}
                                             (c/fn-c [] {}) empty-list c/no-symbol "")
                        [[(c/Field (c/tag ".result-const"))]
                         c/int-constraint])
             (c/ReifiedConstraint 0 (c/tag "field 'param-consts' required") {}
                                  {(c/Field (c/tag ".result-const")) c/int-constraint
                                   (c/Field (c/tag ".param-consts")) c/top-type}
                                  (c/fn-c [] {}) empty-list c/no-symbol "")
             _FILE_ _LINE_))

;; (def _ (test
;;         (reify-c
;;          (c/fn-arity (c/tag 'fn-arity263
;;                      (c/list-c [(c/multi [c/vect-constraint
;;                                           (c/param (c/tag 'fn-arity263 0)])
;;                                 (c/multi [(c/list-c []
;;                                                     (c/coll-of-c (c/sum-c [c/list-constraint
;;                                                                            c/vect-constraint])))
;;                                           (c/param (c/tag 'fn-arity263 1)])])
;;                      ;; returns
;;                      (c/type-op c/concat-op
;;                                 (c/list-c [(c/multi [c/vect-constraint
;;                                                      (c/param (c/tag 'fn-arity263 0)])]
;;                                           (c/multi [(c/list-c []
;;                                                               (c/coll-of-c (c/sum-c [c/list-constraint
;;                                                                                      c/vect-constraint])))
;;                                                     (c/param (c/tag 'fn-arity263 1)]))))
;;          'fn-arity263
;;          [(c/vect-c [(c/SymConstraint 'a)
;;                      (c/SymConstraint 'b)])
;;           (c/list-c [(c/vect-c [(c/SymConstraint 'x)
;;                                 (c/SymConstraint 'y)])
;;                      (c/vect-c [(c/IntConstraint 9 2147483647 -2147483648)
;;                                 (c/IntConstraint 2 2147483647 -2147483648)])])])
;;         '_
;;         _FILE_ _LINE_))

(def _ (test (c/reify-type-constraint (c/type-op c/inner-type-of-op (c/StrConstraint "123") [])
                                      (c/tag '_) [] c/no-loc)
             (c/SumConstraint
              [(c/SubStrConstraint "1" empty-list c/no-symbol "")
               (c/SubStrConstraint "2" empty-list c/no-symbol "")
               (c/SubStrConstraint "3" empty-list c/no-symbol "")]
              empty-list c/no-symbol "")
        _FILE_ _LINE_))

(def _ (test (c/reify-type-constraint (c/type-op c/vect-from-op (c/StrConstraint "ab") c/no-args)
                                      (c/tag '_) [] c/no-loc)

             (c/vect-c [(c/SubStrConstraint "a" empty-list c/no-symbol "")
                        (c/SubStrConstraint "b" empty-list c/no-symbol "")])
             _FILE_ _LINE_))

(def _ (test (c/intersect (c/vect-c [] c/coll-of-any)
                          (c/CollectionOf
                           (c/type-op c/inner-type-of-op (c/param (c/tag 'fn-arity84) 0))
                           empty-list (c/tag "#result") ""))
             (c/vect-c []
                       (c/coll-of-c (c/type-op c/inner-type-of-op
                                               (c/param (c/tag 'fn-arity84) 0))))
             _FILE_ _LINE_))

(def _ (test (c/list-c [c/sym-constraint]
                       (c/list-c [c/int-constraint]))
             (c/list-c [c/sym-constraint
                        c/int-constraint])
             _FILE_ _LINE_))

(def _ (test (c/list-c [c/int-constraint]
                       (c/list-c [c/sym-constraint]
                                 (c/list-c [c/int-constraint])))
             (c/list-c [c/int-constraint
                        c/sym-constraint
                        c/int-constraint])
             _FILE_ _LINE_))

(def _ (test (c/intersect pos-int c/int-constraint)
             pos-int
             _FILE_ _LINE_))

(def _ (test (c/intersect c/maybe-constraint maybe-int)
             maybe-int
             _FILE_ _LINE_))

(def _ (test (c/intersect c/maybe-constraint coll-of-int)
             maybe-int
             _FILE_ _LINE_))

(def _ (test (c/derive (c/MaybeConstraint (c/intersect param c/int-constraint)
                                          empty-list c/no-symbol "")
                       maybe-str)
             (c/NoValues [str-c
                          c/int-constraint])
             _FILE_ _LINE_))

(def _ (test (c/derive (-> param
                           (c/intersect c/maybe-constraint)
                           (c/intersect maybe-str))
                       c/top-type)
             maybe-str
             _FILE_ _LINE_))

(def _ (test (c/derive (-> param
                           (c/intersect c/maybe-constraint)
                           (c/intersect c/int-constraint)
                           (c/intersect maybe-str))
                       c/top-type)
             (c/NoValues [c/int-constraint
                          (c/MaybeConstraint c/top-type empty-list c/no-symbol "")])
             _FILE_ _LINE_))

(def _ (test (c/get-items c/top-type 3)
             [c/top-type c/top-type c/top-type]
             _FILE_ _LINE_))

(def _ (test (c/get-items coll-of-int 2)
             [c/int-constraint c/int-constraint]
             _FILE_ _LINE_))

(def _ (test (c/get-items (c/sum-type [coll-of-int
                                       int-list-1
                                       coll-of-sym])
                          2)
             [(c/SumConstraint
               [c/int-constraint
                (c/SymbolConstraint c/no-symbol empty-list c/no-symbol "")]
               empty-list c/no-symbol "")
              (c/SumConstraint
               [c/int-constraint
                (c/SymbolConstraint c/no-symbol empty-list c/no-symbol "")]
               empty-list c/no-symbol "")]
             _FILE_ _LINE_))

(def _ (test (c/get-items (c/sum-type [coll-of-int
                                       (c/list-c [] (c/coll-of-c pos-int))
                                       coll-of-sym])
                          2)
             [(c/SumConstraint
               [c/int-constraint
                pos-int
                (c/SymbolConstraint c/no-symbol empty-list c/no-symbol "")]
               empty-list c/no-symbol "")
              (c/SumConstraint
               [c/int-constraint
                (c/SymbolConstraint c/no-symbol empty-list c/no-symbol "")
                pos-int]
               empty-list c/no-symbol "")]
             _FILE_ _LINE_))

(def _ (test (c/get-items int-list-1 2)
             []
             _FILE_ _LINE_))

(def _ (test (c/get-items int-vect-1 2)
             []
             _FILE_ _LINE_))

(def _ (test (c/get-items (c/sum-type [int-list-1
                                       (c/list-c [c/sym-constraint])])
                          2)
             []
             _FILE_ _LINE_))

(def _ (test (c/intersect int-list-1 c/coll-of-any)
             int-list-1
             _FILE_ _LINE_))

(def _ (test (c/intersect int-list-2
                          (c/list-c [c/int-constraint c/sym-constraint]))
             (c/NoValues [(c/SymbolConstraint c/no-symbol empty-list c/no-symbol "")
                          c/int-constraint])
             _FILE_ _LINE_))

(def _ (test (c/intersect int-vect-2
                          (c/vect-c [c/int-constraint c/sym-constraint]))
             (c/NoValues [(c/SymbolConstraint c/no-symbol empty-list c/no-symbol "")
                          c/int-constraint])
             _FILE_ _LINE_))

(def _ (test (c/intersect c/fn-constraint
                          int-fn)
             int-fn
             _FILE_ _LINE_))

(def _ (test (c/intersect int-fn
                          (c/FnConstraint [1]
                                          {1 (c/fn-arity (c/tag "")
                                                         (c/list-c [c/string-constraint])
                                                         c/top-type)}
                                          empty-list c/no-symbol ""))
             (c/NoValues
              [(c/FnConstraint
                [1]
                {1 (c/fn-arity (c/tag "")
                               (c/list-c
                                [c/string-constraint])
                               c/top-type)}
                empty-list c/no-symbol "")
               (c/FnConstraint
                [1]
                {1 (c/fn-arity (c/tag "")
                               (c/list-c [c/int-constraint])
                               c/top-type)}
                empty-list c/no-symbol "")])
             _FILE_ _LINE_))

(def _ (test (c/intersect (-> c/fn-constraint
                              (.required-arities [3])
                              (.arities (select-keys (.arities c/fn-constraint) [3])))
                          int-fn)
             (c/NoValues
              [(c/FnConstraint
                [1]
                {1 (c/fn-arity (c/tag "")
                               (c/list-c [c/int-constraint])
                               c/top-type)}
                empty-list c/no-symbol "")
               (c/FnConstraint
                [3]
                {3 (c/fn-arity (c/tag "")
                               (c/list-c [c/top-type c/top-type c/top-type])
                               c/top-type)}
                empty-list c/no-symbol "")])
             _FILE_ _LINE_))

(def _ (test (c/intersect (c/FnConstraint []
                                          {1 (c/fn-arity (c/tag "")
                                                         (c/list-c [c/int-constraint])
                                                         c/int-constraint)}
                                          empty-list c/no-symbol "")
                          (c/FnConstraint []
                                          {1 (c/fn-arity (c/tag "")
                                                         (c/list-c [c/int-constraint])
                                                         c/sym-constraint)}
                                          empty-list c/no-symbol ""))
             (c/NoValues
              [(c/FnConstraint
                [] {1 (c/fn-arity (c/tag "")
                                  (c/list-c [c/int-constraint])
                       (c/SymbolConstraint c/no-symbol empty-list c/no-symbol ""))}
                empty-list c/no-symbol "")
               (c/FnConstraint
                [] {1 (c/fn-arity (c/tag "")
                                  (c/list-c [c/int-constraint])
                                  c/int-constraint)}
                empty-list c/no-symbol "")])
             _FILE_ _LINE_))

(def _ (test (c/intersect (assoc-in reified-11 [.fields (c/Field (c/tag 'field))] c/int-constraint)
                          (assoc-in reified-11 [.fields (c/Field (c/tag 'field))] c/sym-constraint))
             (c/NoValues [(c/SymbolConstraint c/no-symbol empty-list c/no-symbol "")
                          c/int-constraint])
        _FILE_ _LINE_))

(defn test-op
  ([op base]
   ;; (let [new-op (cata (fn [c]
   ;;                      (cond (instance? c/TypeOp c)
   ;;                            (.base c base)

   ;;                            c))
   ;;                    op)]
   ;;   (c/trim new-op))
   (test-op op base c/no-args)
   )
  ([op-code base args]
   (either (map (get c/type-op-fn op-code)
                (fn [f]
                  (cond (instance? c/MultiConstraint base)
                        (reduce (.constraints base) c/top-type
                                (fn [old-c inner]
                                  (c/intersect old-c
                                               (test-op op-code inner args))))

                        (instance? c/SumConstraint base)
                        (-> (.alts base)
                            (map (fn [alt]
                                   (test-op op-code alt args)))
                            c/sum-type)

                        (f base args empty-list))))
           c/top-type)))

(def _ (test (c/type-op c/arg-of-op reified-val 1)
             pos-int
             _FILE_ _LINE_))

(def _ (test (c/type-op c/arg-of-op
                        (c/sum-type
                         [reified-val
                          (c/fn-c []
                                  {2 (c/fn-arity (c/tag "")
                                                 (c/list-c [c/top-type coll-of-sym])
                                                 c/top-type)})])
                        1)
             (c/sum-type [pos-int coll-of-sym])
        _FILE_ _LINE_))

(def _ (test (c/type-op c/arg-of-op type-of 1)
             (c/TypeOp c/arg-of-op type-of 1 c/no-symbol empty-list)
        _FILE_ _LINE_))

(def _ (test (c/type-op c/arg-of-op
                        (c/multi
                         [reified-val
                          (c/fn-c [3]
                                  {3 (c/fn-arity (c/tag 'arity-1)
                                                 (c/list-c [c/top-type c/top-type pos-int])
                                                 param)})])
                        1)
             pos-int
        _FILE_ _LINE_))

(def _ (test (test-op c/call-value-op
                      (c/sum-type
                       [(.invoke-fn reified-val
                                    (c/fn-c [1]
                                            {1 (c/fn-arity (c/tag "")
                                                           (c/list-c [c/top-type])
                                                           pos-int)}))
                        (c/fn-c []
                                {2 (c/fn-arity (c/tag "")
                                               (c/list-c [c/top-type coll-of-sym])
                                               c/sym-constraint)})])
                      c/no-args)
             (c/sum-type [pos-int c/sym-constraint])
             _FILE_ _LINE_))

(def _ (test (test-op c/first-of-op c/empty-list-constraint)
             c/nothing-constraint
             _FILE_ _LINE_))

(def _ (test (test-op c/first-of-op int-list-1)
             maybe-int
             _FILE_ _LINE_))

(def _ (test (test-op c/first-of-op int-vect-1)
             maybe-int
             _FILE_ _LINE_))

(def _ (test (test-op c/last-of-op c/empty-vect-constraint)
             c/nothing-constraint
             _FILE_ _LINE_))

(def _ (test (test-op c/last-of-op int-list-1)
             maybe-int
             _FILE_ _LINE_))

(def _ (test (test-op c/last-of-op int-vect-1)
             maybe-int
             _FILE_ _LINE_))

(def _ (test (test-op c/rest-of-op c/empty-vect-constraint)
             c/empty-vect-constraint
             _FILE_ _LINE_))

(def _ (test (test-op c/rest-of-op int-list-1)
             c/empty-list-constraint
             _FILE_ _LINE_))

(def _ (test (test-op c/rest-of-op int-vect-2)
             int-vect-1
             _FILE_ _LINE_))

(def _ (test (test-op c/first-of-op c/string-constraint)
             (c/MaybeConstraint c/substr-constraint empty-list c/no-symbol "")
             _FILE_ _LINE_))

(def _ (test (test-op c/last-of-op c/string-constraint)
             (c/MaybeConstraint c/substr-constraint empty-list c/no-symbol "")
             _FILE_ _LINE_))

(def _ (test (test-op c/rest-of-op c/string-constraint)
             c/substr-constraint
             _FILE_ _LINE_))

(def _ (test (test-op c/rest-of-op (c/StrConstraint "abc"))
             (c/SubStrConstraint "bc" empty-list c/no-symbol "")
             _FILE_ _LINE_))

(def _ (test (test-op c/butlast-of-op (c/list-c [c/int-constraint c/sym-constraint]))
             (c/list-c [c/int-constraint])
             _FILE_ _LINE_))

(def _ (test (test-op c/list-from-op int-vect-2)
             int-list-2
             _FILE_ _LINE_))

(def _ (test (test-op c/vect-from-op int-list-2)
             int-vect-2
             _FILE_ _LINE_))

(def _ (test (test-op c/inner-type-of-op c/int-constraint)
             (c/NoValues [c/int-constraint c/empty-reified])
             _FILE_ _LINE_))

(def _ (test (test-op c/inner-type-of-op c/empty-list-constraint)
             c/top-type
             _FILE_ _LINE_))

(def _ (test (test-op c/inner-type-of-op maybe-int)
             c/int-constraint
             _FILE_ _LINE_))

(def _ (test (test-op c/inner-type-of-op
                      (c/list-c [c/top-type pos-int] c/no-tail))
             pos-int
             _FILE_ _LINE_))

(def _ (test (test-op c/inner-type-of-op
                      (c/vect-c [sym-c pos-int] c/no-tail))
             (c/sum-type [sym-c pos-int])
             _FILE_ _LINE_))

(def _ (test (c/type-op c/get-from-op c/list-constraint [pos-1])
             c/top-type
             _FILE_ _LINE_))

(def _ (test (c/type-op c/get-from-op (c/list-c [c/int-constraint pos-int])
                        [pos-1])
             pos-int
             _FILE_ _LINE_))

(def _ (test (c/type-op c/get-from-op (c/vect-c [pos-int str-c]) [pos-1])
             str-c
             _FILE_ _LINE_))

(def _ (test (c/type-op c/get-from-op (assoc-in reified-11 [.fields (c/Field (c/tag 'field))] pos-int)
                        [(c/Field (c/tag 'field))])
             pos-int
             _FILE_ _LINE_))

(def _ (test (c/type-op c/get-from-op reified-11 [(c/Field (c/tag 'field))])
             c/int-constraint
             _FILE_ _LINE_))


(def _ (test (c/type-op c/get-from-op
                        (assoc-in reified-11 [.fields (c/Field (c/tag 'field))]
                                  (c/vect-c [pos-int str-c]))
                        [(c/Field (c/tag 'field)) pos-1])
             str-c
             _FILE_ _LINE_))

(def _ (test (c/type-op c/get-from-op
                        (c/vect-c [pos-int (assoc-in reified-12 [.fields (c/Field (c/tag 'other))] str-c)])
                        [pos-1 (c/Field (c/tag 'other))])
             str-c
             _FILE_ _LINE_))

(def _ (test (c/type-op c/get-from-op
                        (c/vect-c [pos-int
                                   (assoc-in reified-12 [.fields (c/Field (c/tag 'other))] str-c)])
                        [pos-1 (c/Field (c/tag 'missing-field))])
             (c/NoValues
              [(assoc-in reified-12 [.fields (c/Field (c/tag 'other))] str-c)
               c/empty-reified])
             _FILE_ _LINE_))

(def _ (test (test-op c/set-to-op (c/list-c [pos-int] coll-of-int) [[pos-1] non-0])
             (c/list-c [pos-int non-0] coll-of-int)
             _FILE_ _LINE_))

(def _ (test (test-op c/set-to-op (c/list-c [pos-int str-c]) [[pos-1] non-0])
             (c/list-c [pos-int non-0])
             _FILE_ _LINE_))

(def _ (test (test-op c/set-to-op (c/list-c [pos-int]) [[pos-1] non-0])
             (c/NoValues [(c/list-c [pos-int])
                          c/empty-reified])
             _FILE_ _LINE_))


;; (def _ (test (c/intersect (c/vect-c [(c/ListConstraint [pos-int] c/no-tail empty-list c/no-symbol "")])
;;                           (c/type-op c/set-to-op [[int-0 pos-2] non-0]))
;;              (c/NoValues [(c/ListConstraint [pos-int] c/no-tail empty-list c/no-symbol "")
;;                           c/empty-reified])
;;              _FILE_ _LINE_))

;; (def _ (test (c/intersect reified-11
;;                           (c/type-op c/set-to-op [[(c/Field 'field)] pos-int]))
;;              (assoc-in reified-11 [.fields (c/Field 'field)] pos-int)
;;              _FILE_ _LINE_))

;; (def nested-reified (c/intersect reified-11
;;                                  (c/type-op c/set-to-op [[(c/Field 'field)] reified-12])))

;; (def _ (test nested-reified
;;              (assoc-in reified-11 [.fields (c/Field 'field)] reified-12)
;;              _FILE_ _LINE_))

;; (def _ (test (c/intersect nested-reified
;;                           (c/type-op c/set-to-op [[(c/Field 'field) (c/Field 'other)] substr-c]))
;;              (assoc-in nested-reified [.fields (c/Field 'field) .fields (c/Field 'other)] substr-c)
;;              _FILE_ _LINE_))

;; (def reified-vect (c/vect-c [reified-12]))
;; (def reified-list (c/ListConstraint [] (c/CollectionOf
;;                                         (c/intersect reified-11
;;                                                      (c/type-op c/set-to-op [[(c/Field 'field)] reified-vect]))
;;                                         empty-list c/no-symbol "")
;;                                     empty-list c/no-symbol ""))

;; (def _ (test (c/intersect reified-list
;;                           (c/type-op c/set-to-op [[pos-1 (c/Field 'field) int-0 (c/Field 'other)] substr-c]))
;;              (c/ListConstraint
;;               [(c/ReifiedConstraint 11  (symbol "c/no-symbol")
;;                                     {(c/Field (symbol "field")) c/top-type}
;;                                     {(c/Field (symbol "field")) reified-vect}
;;                                     (c/FnConstraint [] {} empty-list c/no-symbol "")
;;                                     empty-list  c/no-symbol "")
;;                (c/ReifiedConstraint 11  (symbol "c/no-symbol")
;;                                     {(c/Field (symbol "field")) c/top-type}
;;                                     {(c/Field (symbol "field"))
;;                                      (c/vect-c [(c/intersect reified-12
;;                                                                        (c/type-op c/set-to-op
;;                                                                                  [[(c/Field 'other)] substr-c]))])}
;;                                     (c/FnConstraint [] {} empty-list c/no-symbol "")
;;                                     empty-list  c/no-symbol "")]
;;               (c/CollectionOf
;;                (c/ReifiedConstraint 11  (symbol "c/no-symbol")
;;                                     {(c/Field (symbol "field")) c/top-type}
;;                                     {(c/Field (symbol "field")) reified-vect}
;;                                     (c/FnConstraint [] {} empty-list c/no-symbol "")
;;                                     empty-list  c/no-symbol "")
;;                empty-list c/no-symbol "")
;;               empty-list c/no-symbol "")
;;              _FILE_ _LINE_))

;; (def _ (test (c/intersect reified-list
;;                           (c/type-op c/set-to-op [[pos-1 (c/Field 'field) int-0 (c/Field 'field)] substr-c]))
;;              (c/NoValues [reified-12 c/empty-reified])
;;              _FILE_ _LINE_))

;; (def _ (test (c/intersect reified-list
;;                           (c/type-op c/set-to-op [[pos-1 (c/Field 'field) pos-1 (c/Field 'other)] substr-c]))
;;              (c/NoValues [reified-vect c/empty-reified])
;;              _FILE_ _LINE_))

(def _ (test (c/intersect c/coll-of-any
                          (c/fn-c [1]
                                  {1 (c/fn-arity (c/tag "")
                                                 (c/list-c [c/int-constraint])
                                                 pos-1)}))
             (c/fn-c [1]
                     {1 (c/fn-arity (c/tag "")
                                    (c/list-c [c/int-constraint])
                                    pos-1)})
             _FILE_ _LINE_))

(def _ (test (c/intersect coll-of-int
                          (c/fn-c [1]
                                  {1 (c/fn-arity (c/tag "")
                                                 (c/list-c [c/int-constraint])
                                                 pos-1)}
                                  empty-list c/no-symbol ""))
             (c/fn-c [1]
                     {1 (c/fn-arity (c/tag "")
                                    (c/list-c [c/int-constraint])
                                    pos-1)})
             _FILE_ _LINE_))

(def _ (test (c/intersect coll-of-sym
                          (c/fn-c [1]
                                  {1 (c/fn-arity (c/tag "")
                                    (c/list-c [c/int-constraint])
                                    pos-1)}))
             (c/NoValues [c/sym-constraint pos-1])
             _FILE_ _LINE_))

(def _ (test (c/reify-type-constraint maybe-param (c/tag 'arity-1) [pos-int]
                                      (c/Location _FILE_ _LINE_))
             (c/MaybeConstraint pos-int empty-list c/no-symbol "")
             _FILE_ _LINE_))


(def _ (test (c/type-num (c/sum-type [pos-int int-0]))
             c/IntegerType
             _FILE_ _LINE_))

(def _ (test (c/type-num c/string-constraint)
             c/UnknownType
             _FILE_ _LINE_))

;; (def _ (test (test-op c/concat-op (c/list-c [c/string-constraint] (c/coll-of-c str-c)))
;;              '_
;;              _FILE_ _LINE_))

;; (def _ (test (test-op c/concat-op (c/list-c [substr-c] (c/coll-of-c str-c)))
;;              '_
;;              _FILE_ _LINE_))

;; (def _ (test (test-op c/concat-op (c/list-c [substr-c str-c]))
;;              '_
;;              _FILE_ _LINE_))

(def _ (test (test-op c/concat-op (c/list-c [] (c/coll-of-c (c/list-c []
                                                                   (c/coll-of-c c/int-constraint)))))
             (c/coll-of-c c/int-constraint)
             _FILE_ _LINE_))

(def _ (test (test-op c/concat-op (c/list-c [] (c/coll-of-c (c/coll-of-c c/int-constraint))))
             (c/coll-of-c c/int-constraint)
             _FILE_ _LINE_))

(def _ (test (test-op c/concat-op (c/list-c [(c/list-c [c/int-constraint])]))
             (c/list-c [c/int-constraint])
             _FILE_ _LINE_))

(def _ (test (test-op c/concat-op (c/list-c [(c/list-c [c/int-constraint])]
                                         (c/coll-of-c (c/vect-c []
                                                                (c/coll-of-c pos-int)))))
             (c/list-c [c/int-constraint]
                       (c/coll-of-c pos-int))
             _FILE_ _LINE_))

;; (def _ (test (test-op c/concat-op (c/list-c [(c/vect-c [c/int-constraint])
;;                                           (c/list-c [c/string-constraint])]))
;;              (c/vect-c [c/int-constraint c/string-constraint])
;;              _FILE_ _LINE_))

(def _ (test (test-op c/concat-op (c/list-c [(c/list-c [pos-int] (c/coll-of-c c/int-constraint))
                                          (c/list-c [c/sym-constraint])]))
             (c/list-c [pos-int]
                       (c/coll-of-c (c/sum-c [c/sym-constraint
                                              c/int-constraint])))
             _FILE_ _LINE_))

(def _ (test (test-op c/concat-op (c/list-c [(c/list-c [neg-10 pos-int] (c/coll-of-c c/int-constraint))
                                          (c/list-c [c/sym-constraint])]
                                         (c/coll-of-c (c/list-c [neg-10]))))
             (c/list-c [neg-10 pos-int]
                       (c/coll-of-c (c/sum-c [c/sym-constraint
                                              neg-10
                                              c/int-constraint])))
             _FILE_ _LINE_))

(def _ (test (test-op c/concat-op (c/multi [param
                                         (c/list-c []
                                                   (c/coll-of-c c/seq-constraint))]))
             (c/multi [(c/type-op c/concat-op
                                  (c/param (c/tag 'arity-1) 0))
                       (c/coll-of-c c/top-type)])
             _FILE_ _LINE_))

(def _ (test (c/contents-constraint (c/sum-c [maybe-str
                                              maybe-int
                                              maybe-sym]))
             (c/sum-c [str-c
                       c/int-constraint
                       sym-c])
             _FILE_ _LINE_))

(def _ (test (reify-c (c/type-op c/apply-op
                                 (c/fn-c []
                                         {2 (c/fn-arity (c/tag 'fn-arity13)
                                                        (c/list-c
                                                         [(c/multi [(c/param (c/tag 'fn-arity13) 0)
                                                                    c/int-constraint])
                                                          (c/multi [(c/param (c/tag 'fn-arity13) 1)
                                                                    c/int-constraint])])
                                                        c/int-constraint)})
                                 (c/multi [(c/list-c [(c/IntConstraint 9)
                                                      (c/IntConstraint 7)])
                                           (c/coll-of-c c/int-constraint)
                                           c/seq-constraint]))
                      (c/tag 'nada)
                      [])
             c/int-constraint
             _FILE_ _LINE_))

(def _ (test (c/intersect (.fields c/empty-reified {(c/Field (c/tag ".k")) c/top-type})
                          reified-val)
             (c/NoValues [(.fields c/empty-reified {(c/Field (c/tag ".k")) c/top-type})
                          reified-val])
             _FILE_ _LINE_))

(def _ (test (c/reify-type-constraint (c/fn-arity
                                       (c/tag 'vec)
                                       (c/list-c [(c/param (c/tag 'vec) 0)]
                                                 c/no-tail)
                                       ;; returns
                                       (c/type-op c/vect-from-op
                                                  (c/param (c/tag 'vec) 0)
                                                  (c/tag "#result")))
                                      (c/tag 'vec)

                                      [(c/param (c/tag 'fn-arity80) 0)]
                                      c/no-loc)
             (c/fn-arity
              (c/tag 'vec)
              (c/list-c [(c/param (c/tag 'fn-arity80) 0)]
                        c/no-tail)
              ;; returns
              (c/type-op c/vect-from-op
                         (c/param (c/tag 'fn-arity80) 0)
                         ))
             _FILE_ _LINE_))

(def _ (test (c/intersect c/no-tail c/vect-constraint)
             c/no-tail
             _FILE_ _LINE_))

(def _ (test (c/intersect c/list-constraint
                          c/empty-list-constraint)
             c/empty-list-constraint
             _FILE_ _LINE_))

(def _ (for [c1 test-constraints
             c2 (drop-until test-constraints (partial identical c1))
             c3 (drop-until test-constraints (partial identical c2))]
         (let [c12 (test-intersect c1 c2)
               c23 (test-intersect c2 c3)]
           (test-intersect c12 c23))))

;; (def _ (test (c/do-call-value
;;               (c/ProtoImpls 'conj
;;                             (c/fn-c []
;;                                     {2 (c/fn-arity 'conj
;;                                                    (c/list-c [(c/param 'conj 0)
;;                                                               (c/param 'conj 1)])
;;                                                    ;; returns
;;                                                    c/top-type)})

;;                             {6 (c/fn-c []
;;                                        {2 (c/fn-arity 'fn-arity183
;;                                                       (c/list-c [(c/multi [c/list-constraint
;;                                                                            (c/param 'fn-arity183 0)])
;;                                                                  (c/param 'fn-arity183 1)])
;;                                                       ;; returns
;;                                                       (c/list-c [(c/param 'fn-arity183 1)]
;;                                                                 (c/multi [c/list-constraint
;;                                                                           (c/param 'fn-arity183 0)])))})
;;                              8 (c/fn-c []
;;                                        {2 (c/fn-arity
;;                                            'fn-arity88
;;                                            (c/list-c [(c/multi [c/vect-constraint
;;                                                                 (c/param 'fn-arity88 0)])
;;                                                       (c/param 'fn-arity88 1)])
;;                                            ;; returns
;;                                            (c/vect-c []
;;                                                      (c/coll-of-c (c/sum-c [(c/type-op c/inner-type-of-op
;;                                                                                        (c/param 'fn-arity88 0))
;;                                                                             (c/param 'fn-arity88 1)]))))})})
;;               [(c/sum-c [(c/vect-c []
;;                                    (c/coll-of-c (c/type-op c/inner-type-of-op
;;                                                            (c/param 'fn-arity433 0))))
;;                          c/empty-vect-constraint])
;;                (c/sum-c [(c/vect-c []
;;                                    (c/coll-of-c (c/type-op c/inner-type-of-op
;;                                                            (c/param 'fn-arity433 0))))
;;                          c/empty-vect-constraint])]
;;               empty-list)
;;              '_
;;              _FILE_ _LINE_))

;; (def NoTest (any-of c/ParamConstraint))

;; (def _ (for [op op-constraints
;;              c test-constraints
;;              :when (instance? NoTest c)]
;;          (print-err 'op op
;;                     "\n\n" 'c c
;;                     "\n\n" 'int (c/intersect op c))))

(main [_]
  (print-err 'testing-constraints))
