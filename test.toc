
;; regression tests for constraints.toc

(add-ns p (module "private.toc"))
(add-ns c (module "constraints.toc"))

(def coll-of-int (p/CollectionOf c/int-constraint empty-list p/no-symbol ""))
(def int-list (p/ListConstraint [] coll-of-int empty-list p/no-symbol ""))
(def int-list-1 (p/ListConstraint [c/int-constraint] p/no-tail empty-list p/no-symbol ""))
(def int-list-2 (p/ListConstraint [c/int-constraint c/int-constraint] p/no-tail empty-list p/no-symbol ""))
(def coll-of-int (p/CollectionOf c/int-constraint empty-list p/no-symbol ""))

(def int-vect (p/ListConstraint [] coll-of-int empty-list p/no-symbol ""))
(def int-vect-1 (p/ListConstraint [c/int-constraint] p/no-tail empty-list p/no-symbol ""))
(def int-vect-2 (p/ListConstraint [c/int-constraint c/int-constraint] p/no-tail empty-list p/no-symbol ""))

(def sym-c (p/SymbolConstraint 'this-sym empty-list p/no-symbol ""))
(def coll-of-sym (p/CollectionOf c/sym-constraint empty-list p/no-symbol ""))

(def substr-c (p/SubStrConstraint "strng" empty-list p/no-symbol ""))
(def str-c (p/StrBuffConstraint "buffr" empty-list p/no-symbol ""))
(def coll-of-str (p/CollectionOf c/string-constraint empty-list p/no-symbol ""))

(def hash-coll-constraint (p/HashMapConstraint p/HashCollisionNodeType {}
                                               c/top-type c/top-type empty-list p/no-symbol ""))
(def array-constraint (p/HashMapConstraint p/ArrayNodeType {} c/top-type c/top-type empty-list p/no-symbol ""))
(def bitmap-constraint (p/HashMapConstraint p/BitmapIndexedType {} c/top-type c/top-type empty-list p/no-symbol ""))

(def pos-int (p/IntegerConstraint p/no-int int-max 1 empty-list p/no-symbol ""))
(def neg-int (p/IntegerConstraint p/no-int -1 int-min empty-list p/no-symbol ""))
(def pos-1 (p/IntegerConstraint 1 int-max int-min empty-list p/no-symbol ""))
(def pos-10 (p/IntegerConstraint 10 int-max int-min empty-list p/no-symbol ""))
(def neg-1 (p/IntegerConstraint -1 int-max int-min empty-list p/no-symbol ""))
(def neg-10 (p/IntegerConstraint -10 int-max int-min empty-list p/no-symbol ""))
(def int-0 (p/IntegerConstraint 0 int-max int-min empty-list p/no-symbol ""))
(def non-0 (p/SumConstraint [pos-int neg-int] empty-list p/no-symbol ""))

(def int-or-str (p/SumConstraint [c/int-constraint c/string-constraint] empty-list p/no-symbol ""))

(def maybe-str  (p/MaybeConstraint str-c empty-list p/no-symbol ""))
(def maybe-int  (p/MaybeConstraint pos-10 empty-list p/no-symbol ""))
(def maybe-sym  (p/MaybeConstraint sym-c empty-list p/no-symbol ""))

(def param (p/ParamConstraint 'arity-1 0 empty-list p/no-symbol ""))

(def opaque-constraint (p/OpaqueConstraint empty-list p/no-symbol ""))

;; (def agent-constraint (AgentConstraint top-type empty-list p/no-symbol ""))
;; (def promise-constraint (PromiseConstraint top-type empty-list p/no-symbol ""))
;; (def future-constraint (FutureConstraint empty-list p/no-symbol ""))
;; (def arity-constraint (ReifiedConstraint FnArityType {} 'FnArity (.arities fn-constraint {})
;;                                          empty-list p/no-symbol ""))

(def test-constraints [c/top-type
                       c/bottom-type
                       c/empty-list-constraint
                       ;; c/empty-vect-constraint
                       c/coll-of-any
                       c/list-constraint
                       ;; c/vect-constraint
                       ;; c/seq-constraint
                       ;; c/fn-constraint
                       ;; c/not-container
                       ;; c/type-of-constraint
                       ;; c/inner-type-of-constraint
                       ;; c/substr-constraint
                       ;; c/strbuff-constraint
                       ;; c/string-constraint
                       ;; c/seq-or-str-constraint
                       ;; c/hash-coll-constraint
                       ;; c/array-constraint
                       ;; c/bitmap-constraint
                       ;; c/hashmap-constraint
                       c/int-constraint
                       c/sym-constraint
                       c/maybe-constraint
                       ;; c/set-constraint
                       ;; c/agent-constraint
                       ;; c/promise-constraint
                       ;; c/future-constraint
                       ;; c/opaque-constraint
                       ;; c/arity-constraint

                       opaque-constraint
                       int-list
                       int-list-1
                       int-list-2
                       coll-of-int

                       int-vect
                       int-vect-1
                       int-vect-2

                       sym-c

                       ;; substr-c
                       ;; str-c
                       coll-of-str

                       pos-int
                       neg-int
                       pos-1
                       pos-10
                       neg-1
                       neg-10
                       int-0
                       non-0

                       maybe-str
                       maybe-int
                       maybe-sym

                       param])

(defn test [ex1 ex2 file line]
  (either (= ex1 ex2)
          (do
            (print-err 'Failed-at file line
                       "\nexpr 1" ex1
                       "\nexpr 2" ex2)
            (abort))))

(defn test-intersect [c1 c2]
  (let [final-1 (c/intersect c1 c2)
        ;; _ (print-err 'final-1 final-1)
        ;; _ (print-err "------")
        final-2 (c/intersect c2 c1)]
    ;; (print-err 'final-2 final-2)
    (either (map (= final-2 final-1)
                 (fn [c]
                   ;; (either (map (instance? c/NoValues c)
                   ;;              (fn [_]
                   ;;                (c/conflicting-assertions c _FILE_ _LINE_)
                   ;;                (print-err 'c c)))
                   ;;         (print-err 'final-c c))
                   final-1))
            (do
              (print-err "FAIL!! 'c/intersect not commutative")
              (print-err 'c1 c1)
              (print-err 'c2 c2)
              (print-err final-1)
              (print-err final-2)))))

(defn drop-until [coll pred]
  (cond (flat-map (first coll) pred)
        coll

        (drop-until (rest coll) pred)))

(def _ (test (c/trim (p/ListConstraint
                        [c/sym-constraint]
                        (p/ListConstraint [c/int-constraint] p/no-tail empty-list p/no-symbol "")
                        empty-list p/no-symbol ""))
             (p/ListConstraint [(p/SymbolConstraint p/no-symbol empty-list p/no-symbol "")
                                (p/IntegerConstraint p/no-int 2147483647 -2147483648 empty-list p/no-symbol "")]
                               p/no-tail empty-list p/no-symbol "")
             _FILE_ _LINE_))

(def _ (test (c/trim (p/ListConstraint
                        [c/int-constraint]
                        (p/ListConstraint [c/sym-constraint]
                                          (p/ListConstraint [c/int-constraint]
                                                            p/no-tail empty-list p/no-symbol "")
                                          empty-list p/no-symbol "")
                        empty-list p/no-symbol ""))
             (p/ListConstraint [(p/IntegerConstraint p/no-int 2147483647 -2147483648 empty-list p/no-symbol "")
                                (p/SymbolConstraint p/no-symbol empty-list p/no-symbol "")
                                (p/IntegerConstraint p/no-int 2147483647 -2147483648 empty-list p/no-symbol "")]
                               p/no-tail empty-list p/no-symbol "")
             _FILE_ _LINE_))

(def _ (test (p/derive (-> param
                             (c/intersect c/maybe-constraint)
                             (c/intersect maybe-str))
                         c/top-type)
             maybe-str
             _FILE_ _LINE_))

(def _ (test (p/derive (-> param
                             (c/intersect c/maybe-constraint)
                             (c/intersect c/int-constraint)
                             (c/intersect maybe-str))
                         c/top-type)
             (p/NoValues [(p/MaybeConstraint c/top-type empty-list p/no-symbol "")
                          (p/IntegerConstraint p/no-int 2147483647 -2147483648 empty-list p/no-symbol "")])
             _FILE_ _LINE_))

(def _ (test (p/get-items c/top-type 3)
             [c/top-type c/top-type c/top-type]
             _FILE_ _LINE_))

(def _ (test (p/get-items coll-of-int 2)
             [c/int-constraint c/int-constraint]
             _FILE_ _LINE_))

(def _ (test (p/get-items (p/sum-type [coll-of-int
                                       int-list-1
                                       coll-of-sym])
                          2)
             [(p/SumConstraint
               [(p/IntegerConstraint p/no-int 2147483647 -2147483648 empty-list p/no-symbol "")
                (p/SymbolConstraint p/no-symbol empty-list p/no-symbol "")]
               empty-list p/no-symbol "")
              (p/SumConstraint
               [(p/IntegerConstraint p/no-int 2147483647 -2147483648 empty-list p/no-symbol "")
                (p/SymbolConstraint p/no-symbol empty-list p/no-symbol "")]
               empty-list p/no-symbol "")]
             _FILE_ _LINE_))

(def _ (test (p/get-items (p/sum-type [coll-of-int
                                       (p/ListConstraint []
                                                         (p/CollectionOf pos-int empty-list p/no-symbol "")
                                                         empty-list p/no-symbol "")
                                       coll-of-sym])
                          2)
             [(p/SumConstraint
               [(p/IntegerConstraint p/no-int 2147483647 -2147483648 empty-list p/no-symbol "")
                pos-int
                (p/SymbolConstraint p/no-symbol empty-list p/no-symbol "")]
               empty-list p/no-symbol "")
              (p/SumConstraint
               [(p/IntegerConstraint p/no-int 2147483647 -2147483648 empty-list p/no-symbol "")
                (p/SymbolConstraint p/no-symbol empty-list p/no-symbol "")
                pos-int]
               empty-list p/no-symbol "")]
             _FILE_ _LINE_))

(def _ (test (p/get-items int-list-1 2)
             []
             _FILE_ _LINE_))

(def _ (test (p/get-items int-vect-1 2)
             []
             _FILE_ _LINE_))

(def _ (test (p/get-items (p/sum-type [int-list-1
                                       (p/ListConstraint [c/sym-constraint] p/no-tail empty-list p/no-symbol "")])
                          2)
             []
             _FILE_ _LINE_))

(def _ (test (c/intersect int-list-1 c/coll-of-any)
             int-list-1
             _FILE_ _LINE_))

(def _ (test (c/intersect int-list-2
                          (p/ListConstraint [c/int-constraint c/sym-constraint]
                                            p/no-tail empty-list p/no-symbol ""))
             (p/NoValues [(p/SymbolConstraint p/no-symbol empty-list p/no-symbol "")
                          (p/IntegerConstraint p/no-int 2147483647 -2147483648 empty-list p/no-symbol "")])
             _FILE_ _LINE_))

(def _ (test (c/intersect int-vect-2
                          (p/VectorConstraint [c/int-constraint c/sym-constraint]
                                              p/no-tail empty-list p/no-symbol ""))
             (p/NoValues [(p/SymbolConstraint p/no-symbol empty-list p/no-symbol "")
                          (p/IntegerConstraint p/no-int 2147483647 -2147483648 empty-list p/no-symbol "")])
             _FILE_ _LINE_))

(def _ (for [c1 test-constraints
             c2 (drop-until test-constraints (partial = c1))
             c3 (drop-until test-constraints (partial = c2))]
         (let [c12 (test-intersect c1 c2)
               c23 (test-intersect c2 c3)]
           (test-intersect c12 c23))))

(main [_]
  (print-err 'testing-constraints))
